[metadata]
name = varstool
version = 2.3.5
description = VARS-TOOL Sensitivity and Uncertainty Analysis Package
author = Saman Razavi, Kasra Keshavarz, Cordell Blanchard
author_email = saman.razavi@usask.ca, kasra.keshavarz@usask.ca, cordell.blanchard@usask.ca
license = gpl3
license_files = LICENSE
url = https://www.vars-tool.com
long_description = file: README.md
long_description_content_type = text/markdown
platforms = any
classifiers =
    Development Status :: 5 - Production/Stable
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    License :: OSI Approved :: GNU General Public License v3 (GPLv3)
    Intended Audience :: Education
    Topic :: Scientific/Engineering
    Operating System :: OS Independent
project_urls = 
    Bug Tracker = https://github.com/vars-tool/vars-tool/issues
    Documentation = https://vars-tool.readthedocs.io/en/latest/index.html
    Source Code = https://github.com/vars-tool/vars-tool

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    = src
python_requires = >=3.7
install_requires = numpy; scipy; matplotlib; pandas; mapply; psutil; joblib; tqdm;
# Add here test requirements (semicolon-separated)
tests_require = pytest; pytest-cov

[options.packages.find]
where = src
exclude =
    tests

#[OPTIONS.ENTRY_POINTS]
#CONSOLE_SCRIPTS =
#  VARS-TOOL = VARS-TOOL.SCRIPTS.VARS-TOOL:MAIN
# Add here console scripts such as:
# console_scripts =
#     script_name = ${package}.module:function
# For example:
# console_scripts =
#     fibonacci = ${package}.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = tests
#extras = True

#[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
#addopts =
#    --cov varstool --cov-report html --verbose
#norecursedirs =
#    dist
#    build
#    .tox
#testpaths = tests

[aliases]
release = sdist bdist_wheel upload

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

#[build_sphinx]
#source_dir = docs
#build_dir = docs/_build

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
#no-vcs = 1
#formats = bdist_wheel

#[mypy]
#python_version = 3.6

#[mypy-numpy]
#ignore_missing_imports = True

#[mypy-scipy.*]
#ignore_missing_imports = True

#[mypy-pandas]
#ignore_missing_imports = True